{"ast":null,"code":"var _jsxFileName = \"/Users/marty/Desktop/projects-site/src/features/display/AnimatedDisplayCard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';\nimport { useSpring, animated } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedDisplayCard = ({\n  item\n}) => {\n  _s();\n  const {\n    image,\n    name,\n    description\n  } = item;\n  const [toggle, setToggle] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const animatedStyle = useSpring({\n    opacity: toggle ? 1 : 0,\n    transform: toggle ? isHovered ? 'scale(1.03)' : 'scale(1)' : 'scale(0.9)',\n    boxShadow: toggle ? isHovered ? '0 15px 25px rgba(0,0,0,0.3)' : '0 10px 20px rgba(0,0,0,0.2)' : '0 0 0 rgba(0,0,0,0)',\n    config: {\n      tension: 300,\n      friction: 10\n    }\n  });\n  const titleStyle = useSpring({\n    opacity: isHovered ? 1 : 0,\n    config: {\n      duration: 300\n    }\n  });\n  useEffect(() => {\n    setToggle(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: animatedStyle,\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        backgroundColor: 'black',\n        color: 'white'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardImg, {\n        src: image,\n        alt: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(animated.div, {\n          style: titleStyle,\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardText, {\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedDisplayCard, \"7Ey/wKDbfn3TbY829duBCVYOpJw=\", false, function () {\n  return [useSpring, useSpring];\n});\n_c = AnimatedDisplayCard;\nexport default AnimatedDisplayCard;\n\n// import { useState, useEffect } from 'react';\n// import { Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';\n// import { useSpring, animated } from 'react-spring';\n\n// const AnimatedDisplayCard = ({ item }) => {\n//     const { image, name, description } = item;\n//     const [toggle, setToggle] = useState(false);\n//     const [isHovered, setIsHovered] = useState(false);\n\n//     const animatedStyle = useSpring({\n//         opacity: toggle ? 1 : 0,\n//         transform: toggle ? (isHovered ? 'scale(1.03)' : 'scale(1)') : 'scale(0.9)',\n//         boxShadow: toggle ? (isHovered ? '0 15px 25px rgba(0,0,0,0.3)' : '0 10px 20px rgba(0,0,0,0.2)') : '0 0 0 rgba(0,0,0,0)',\n//         config: { tension: 300, friction: 10 }\n//     });\n\n//     useEffect(() => {\n//         setToggle(true);\n//     }, []);\n\n//     return (\n//         <animated.div\n//             style={animatedStyle}\n//             onMouseEnter={() => setIsHovered(true)}\n//             onMouseLeave={() => setIsHovered(false)}\n//         >\n//             <Card>\n//                 <CardImg src={image} alt={name} />\n//                 <CardBody>\n//                     <CardTitle>{name}</CardTitle>\n//                     <CardText>{description}</CardText>\n//                 </CardBody>\n//             </Card>\n//         </animated.div>\n//     );\n// };\n\n// export default AnimatedDisplayCard;\n\n// const AnimatedDisplayCard = ({ item }) => {\n//     const {image, name, description} = item; \n//     const [toggle, setToggle] = useState(false)\n\n//     const animatedStyle = useSpring({\n//         opacity: toggle ? 1 : 0, \n//         transform: toggle ? 'scale(1,1)' : 'scale(1,0)',\n//         config: {duration: 500}\n//     })\nvar _c;\n$RefreshReg$(_c, \"AnimatedDisplayCard\");","map":{"version":3,"names":["useState","useEffect","Card","CardImg","CardBody","CardTitle","CardText","useSpring","animated","jsxDEV","_jsxDEV","AnimatedDisplayCard","item","_s","image","name","description","toggle","setToggle","isHovered","setIsHovered","animatedStyle","opacity","transform","boxShadow","config","tension","friction","titleStyle","duration","div","style","onMouseEnter","onMouseLeave","children","backgroundColor","color","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marty/Desktop/projects-site/src/features/display/AnimatedDisplayCard.js"],"sourcesContent":["\nimport { useState, useEffect } from 'react';\nimport { Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';\nimport { useSpring, animated } from 'react-spring';\n\nconst AnimatedDisplayCard = ({ item }) => {\n    const { image, name, description } = item;\n    const [toggle, setToggle] = useState(false);\n    const [isHovered, setIsHovered] = useState(false);\n\n    const animatedStyle = useSpring({\n        opacity: toggle ? 1 : 0,\n        transform: toggle ? (isHovered ? 'scale(1.03)' : 'scale(1)') : 'scale(0.9)',\n        boxShadow: toggle ? (isHovered ? '0 15px 25px rgba(0,0,0,0.3)' : '0 10px 20px rgba(0,0,0,0.2)') : '0 0 0 rgba(0,0,0,0)',\n        config: { tension: 300, friction: 10 }\n    });\n\n    const titleStyle = useSpring({\n        opacity: isHovered ? 1 : 0,\n        config: { duration: 300 }\n    });\n\n    useEffect(() => {\n        setToggle(true);\n    }, []);\n\n    return (\n        <animated.div\n            style={animatedStyle}\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            <Card style={{ backgroundColor: 'black', color: 'white' }}>\n                <CardImg src={image} alt={name} />\n                <CardBody>\n                    <animated.div style={titleStyle}>\n                        <CardTitle>{name}</CardTitle>\n                    </animated.div>\n                    <CardText>{description}</CardText>\n                </CardBody>\n            </Card>\n        </animated.div>\n    );\n};\n\nexport default AnimatedDisplayCard;\n\n\n\n\n\n\n\n\n// import { useState, useEffect } from 'react';\n// import { Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';\n// import { useSpring, animated } from 'react-spring';\n\n// const AnimatedDisplayCard = ({ item }) => {\n//     const { image, name, description } = item;\n//     const [toggle, setToggle] = useState(false);\n//     const [isHovered, setIsHovered] = useState(false);\n\n//     const animatedStyle = useSpring({\n//         opacity: toggle ? 1 : 0,\n//         transform: toggle ? (isHovered ? 'scale(1.03)' : 'scale(1)') : 'scale(0.9)',\n//         boxShadow: toggle ? (isHovered ? '0 15px 25px rgba(0,0,0,0.3)' : '0 10px 20px rgba(0,0,0,0.2)') : '0 0 0 rgba(0,0,0,0)',\n//         config: { tension: 300, friction: 10 }\n//     });\n\n//     useEffect(() => {\n//         setToggle(true);\n//     }, []);\n\n//     return (\n//         <animated.div\n//             style={animatedStyle}\n//             onMouseEnter={() => setIsHovered(true)}\n//             onMouseLeave={() => setIsHovered(false)}\n//         >\n//             <Card>\n//                 <CardImg src={image} alt={name} />\n//                 <CardBody>\n//                     <CardTitle>{name}</CardTitle>\n//                     <CardText>{description}</CardText>\n//                 </CardBody>\n//             </Card>\n//         </animated.div>\n//     );\n// };\n\n// export default AnimatedDisplayCard;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const AnimatedDisplayCard = ({ item }) => {\n//     const {image, name, description} = item; \n//     const [toggle, setToggle] = useState(false)\n\n//     const animatedStyle = useSpring({\n//         opacity: toggle ? 1 : 0, \n//         transform: toggle ? 'scale(1,1)' : 'scale(1,0)',\n//         config: {duration: 500}\n//     })"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}