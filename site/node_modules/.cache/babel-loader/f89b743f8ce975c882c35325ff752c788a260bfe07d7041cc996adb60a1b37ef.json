{"ast":null,"code":"// import { COMMENTS } from \"../../app/shared/COMMENTS\"; \nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { baseURL } from \"../../app/shared/baseUrl\";\nconst initialState = {\n  commentsArray: [],\n  isLoading: true,\n  errMsg: ''\n};\n\n// Get /comments\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async () => {\n  const response = await fetch(baseUrl + 'comments');\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  return await response.json();\n});\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      console.log('addComment action.payload', action.payload);\n      console.log('addComment state.commentsArray', state.commentsArray);\n      const newComment = {\n        id: state.commentsArray.length + 1,\n        ...action.payload\n      };\n      state.commentsArray.push(newComment);\n    }\n  },\n  // extra reducers to handle async thunk\n  extraReducers: {\n    [fetchComments.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '', state.commentsArray = action.payload;\n    },\n    [fetchComments.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }\n  }\n});\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport const commentsReducer = commentsSlice.reducer;\nexport const selectCommentsByProjectId = projectId => state => {\n  return state.comments.commentsArray.filter(c => c.projectId === parseInt(projectId, 10));\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseURL","initialState","commentsArray","isLoading","errMsg","fetchComments","response","fetch","baseUrl","ok","Promise","reject","status","json","commentsSlice","name","reducers","addComment","state","action","console","log","payload","newComment","id","length","push","extraReducers","pending","fulfilled","rejected","error","message","actions","commentsReducer","reducer","selectCommentsByProjectId","projectId","comments","filter","c","parseInt"],"sources":["/Users/marty/Desktop/projects-site/site/src/features/comments/commentsSlice.js"],"sourcesContent":["// import { COMMENTS } from \"../../app/shared/COMMENTS\"; \nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { baseURL } from \"../../app/shared/baseUrl\";\n\nconst initialState = {\n    commentsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\n// Get /comments\nexport const fetchComments = createAsyncThunk(\n    'comments/fetchComments',\n    async () => {\n        const response = await fetch(baseUrl + 'comments');\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch, status: ' + response.status); \n        }\n        return await response.json();\n    }\n);\n\nconst commentsSlice = createSlice({\n    name: 'comments',\n    initialState,\n    reducers: {\n        addComment: (state, action) => {\n            console.log('addComment action.payload', action.payload);\n            console.log('addComment state.commentsArray', state.commentsArray);\n            const newComment = {\n                id: state.commentsArray.length + 1,\n                ...action.payload\n            }\n            state.commentsArray.push(newComment);\n        }\n    },\n    // extra reducers to handle async thunk\n    extraReducers: {\n       [fetchComments.pending]: (state) => {\n        state.isLoading = true;\n       },\n       [fetchComments.fulfilled]: (state, action) => {\n        state.isLoading = false; \n        state.errMsg = '',\n        state.commentsArray = action.payload\n       }, \n       [fetchComments.rejected]: (state, action) => {\n            state.isLoading = false; \n            state.errMsg = action.error ? action.error.message: 'Fetch failed';\n       }\n    }\n\n});\n\nexport const { addComment } = commentsSlice.actions;\n\nexport const commentsReducer = commentsSlice.reducer;\n\nexport const selectCommentsByProjectId = ( projectId ) => (state) => {\n    return state.comments.commentsArray.filter((c) => c.projectId === parseInt(projectId, 10));\n};"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,OAAO,QAAQ,0BAA0B;AAElD,MAAMC,YAAY,GAAG;EACjBC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,IAAI;EACfC,MAAM,EAAE;AACZ,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGN,gBAAgB,CACzC,wBAAwB,EACxB,YAAY;EACR,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,GAAG,UAAU,CAAC;EAClD,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IACd,OAAOC,OAAO,CAACC,MAAM,CAAC,2BAA2B,GAAGL,QAAQ,CAACM,MAAM,CAAC;EACxE;EACA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;AAChC,CACJ,CAAC;AAED,MAAMC,aAAa,GAAGhB,WAAW,CAAC;EAC9BiB,IAAI,EAAE,UAAU;EAChBd,YAAY;EACZe,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3BC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,MAAM,CAACG,OAAO,CAAC;MACxDF,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEH,KAAK,CAAChB,aAAa,CAAC;MAClE,MAAMqB,UAAU,GAAG;QACfC,EAAE,EAAEN,KAAK,CAAChB,aAAa,CAACuB,MAAM,GAAG,CAAC;QAClC,GAAGN,MAAM,CAACG;MACd,CAAC;MACDJ,KAAK,CAAChB,aAAa,CAACwB,IAAI,CAACH,UAAU,CAAC;IACxC;EACJ,CAAC;EACD;EACAI,aAAa,EAAE;IACZ,CAACtB,aAAa,CAACuB,OAAO,GAAIV,KAAK,IAAK;MACnCA,KAAK,CAACf,SAAS,GAAG,IAAI;IACvB,CAAC;IACD,CAACE,aAAa,CAACwB,SAAS,GAAG,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC7CD,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAACd,MAAM,GAAG,EAAE,EACjBc,KAAK,CAAChB,aAAa,GAAGiB,MAAM,CAACG,OAAO;IACrC,CAAC;IACD,CAACjB,aAAa,CAACyB,QAAQ,GAAG,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACxCD,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAACd,MAAM,GAAGe,MAAM,CAACY,KAAK,GAAGZ,MAAM,CAACY,KAAK,CAACC,OAAO,GAAE,cAAc;IACvE;EACH;AAEJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEf;AAAW,CAAC,GAAGH,aAAa,CAACmB,OAAO;AAEnD,OAAO,MAAMC,eAAe,GAAGpB,aAAa,CAACqB,OAAO;AAEpD,OAAO,MAAMC,yBAAyB,GAAKC,SAAS,IAAOnB,KAAK,IAAK;EACjE,OAAOA,KAAK,CAACoB,QAAQ,CAACpC,aAAa,CAACqC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACH,SAAS,KAAKI,QAAQ,CAACJ,SAAS,EAAE,EAAE,CAAC,CAAC;AAC9F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}