{"ast":null,"code":"// import { COMMENTS } from \"../../app/shared/COMMENTS\"; \nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { baseUrl } from \"../../app/shared/baseUrl\";\nconst initialState = {\n  commentsArray: [],\n  isLoading: true,\n  errMsg: ''\n};\n\n// GET Thunk /comments\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async () => {\n  const response = await fetch(baseUrl + 'comments');\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  return await response.json();\n});\n\n// POST Thunk\nexport const postComment = createAsyncThunk('comments/fetchComments', async (comment, {\n  dispatch\n}) => {\n  const response = await fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!response.ok) {\n    return Promise.reject('Unable to post, stauts: ' + response.status);\n  }\n  const data = await response.json();\n  dispatch(addComment(data));\n});\n\n// SLICE\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      // json-server already returned the full comment (id included)\n      state.commentsArray.push(action.payload);\n    }\n  },\n  extraReducers: {\n    // fetchComments\n    [fetchComments.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.commentsArray = action.payload;\n    },\n    [fetchComments.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    },\n    // postComment\n    [postComment.rejected]: (state, action) => {\n      alert('Your comment could not be posted\\nError: ' + action.error.message);\n    }\n  }\n});\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport const commentsReducer = commentsSlice.reducer;\nexport const selectCommentsByProjectId = projectId => state => {\n  var _state$comments;\n  return (_state$comments = state.comments) !== null && _state$comments !== void 0 && _state$comments.commentsArray ? state.comments.commentsArray.filter(c => c.projectId === parseInt(projectId, 10)) : [];\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","initialState","commentsArray","isLoading","errMsg","fetchComments","response","fetch","ok","Promise","reject","status","json","postComment","comment","dispatch","method","body","JSON","stringify","headers","data","addComment","commentsSlice","name","reducers","state","action","push","payload","extraReducers","pending","fulfilled","rejected","error","message","alert","actions","commentsReducer","reducer","selectCommentsByProjectId","projectId","_state$comments","comments","filter","c","parseInt"],"sources":["/Users/marty/Desktop/projects-site/site/src/features/comments/commentsSlice.js"],"sourcesContent":["// import { COMMENTS } from \"../../app/shared/COMMENTS\"; \nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { baseUrl } from \"../../app/shared/baseUrl\";\n\nconst initialState = {\n    commentsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\n// GET Thunk /comments\nexport const fetchComments = createAsyncThunk(\n    'comments/fetchComments',\n    async () => {\n        const response = await fetch(baseUrl + 'comments');\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch, status: ' + response.status); \n        }\n        return await response.json();\n    }\n);\n\n// POST Thunk\nexport const postComment = createAsyncThunk(\n    'comments/fetchComments', \n    async (comment, {dispatch}) => {\n        const response = await fetch(baseUrl + 'comments', {\n            method: 'POST',\n            body: JSON.stringify(comment),\n            headers: { 'Content-Type': 'application/json' }\n        }); \n        if (!response.ok) {\n            return Promise.reject('Unable to post, stauts: ' +response.status); \n        }\n        const data = await response.json();\n        dispatch(addComment(data)); \n        \n    }\n)\n\n\n// SLICE\nconst commentsSlice = createSlice({\n    name: 'comments',\n    initialState,\n    reducers: {\n        addComment: (state, action) => {\n            // json-server already returned the full comment (id included)\n            state.commentsArray.push(action.payload);\n        }\n    },\n    extraReducers: {\n        // fetchComments\n        [fetchComments.pending]:   (state)          => { state.isLoading = true; },\n        [fetchComments.fulfilled]: (state, action)  => {\n            state.isLoading  = false;\n            state.errMsg     = '';\n            state.commentsArray = action.payload;\n        },\n        [fetchComments.rejected]:  (state, action)  => {\n            state.isLoading = false;\n            state.errMsg    = action.error ? action.error.message : 'Fetch failed';\n        },\n        // postComment\n        [postComment.rejected]:    (state, action)  => {\n            alert('Your comment could not be posted\\nError: ' + action.error.message);\n        }\n    }\n});\n\nexport const { addComment } = commentsSlice.actions;\n\nexport const commentsReducer = commentsSlice.reducer;\n\nexport const selectCommentsByProjectId = (projectId) => (state) =>\n    state.comments?.commentsArray\n        ? state.comments.commentsArray.filter(\n              (c) => c.projectId === parseInt(projectId, 10)\n          )\n        : [];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}