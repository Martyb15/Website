{"ast":null,"code":"// import { CERTIFICATION } from \"../../app/shared/oldData/CERTIFICATION\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { baseurl } from \"../../app/shared/baseUrl\";\nimport { mapImageUrl } from \"../../utils/mapImageUrl\";\nimport { a } from \"react-spring\";\nexport const fetchCertification = createAsyncThunk('certifications/fetchCertification', async () => {\n  const response = await fetch(baseUrl + 'certifications');\n  if (!response.ok) {\n    return Promise('Unable to fetch, status: ' + response.status);\n  }\n  const data = await response.json();\n  return data;\n});\nconst initialState = {\n  certificationsArray: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst certificationsSlice = createSlice({\n  name: 'certifications',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCertification.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchCertification.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.certificationsArray = mapImageUrl(action.payload);\n    },\n    [fetchCertification.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.errMsg ? action.error.message : 'Fetch Failed';\n    }\n  }\n});\nexport const certificationsReducer = certificationsSlice.reducer;\nexport const selectFeaturedCertifications = state => {\n  return {\n    featuredItem: state.certifications.certificationsArray.find(certification => certification.featured),\n    isLoading: state.certifications.isLoading,\n    errMsg: state.certifications.errMsg\n  };\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseurl","mapImageUrl","a","fetchCertification","response","fetch","baseUrl","ok","Promise","status","data","json","initialState","certificationsArray","isLoading","errMsg","certificationsSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","error","message","certificationsReducer","reducer","selectFeaturedCertifications","featuredItem","certifications","find","certification","featured"],"sources":["/Users/marty/Desktop/projects-site/site/src/features/certifications/certificationsSlice.js"],"sourcesContent":["// import { CERTIFICATION } from \"../../app/shared/oldData/CERTIFICATION\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { baseurl } from \"../../app/shared/baseUrl\";\nimport { mapImageUrl } from \"../../utils/mapImageUrl\";\nimport { a } from \"react-spring\";\n\nexport const fetchCertification = createAsyncThunk (\n    'certifications/fetchCertification',\n    async () => {\n        const response = await fetch(baseUrl + 'certifications');\n        if (!response.ok) {\n            return Promise('Unable to fetch, status: ' + response.status);\n        }\n        const data = await response.json(); \n        return data; \n    }\n);\n\nconst initialState = {\n    certificationsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst certificationsSlice = createSlice({\n    name: 'certifications',\n    initialState, \n    reducers: {},\n    extraReducers: {\n        [fetchCertification.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [fetchCertification.fulfilled]: (state, action) => {\n            state.isLoading = false;\n            state.errMsg = ''; \n            state.certificationsArray = mapImageUrl(action.payload);\n        },\n        [fetchCertification.rejected]: (state, action) => {\n            state.isLoading = false; \n            state.errMsg = action.errMsg ? action.error.message : 'Fetch Failed'\n        }\n    }\n});\n\nexport const certificationsReducer = certificationsSlice.reducer; \n\nexport const selectFeaturedCertifications = (state) => {\n    return {\n        featuredItem: state.certifications.certificationsArray.find((certification) => certification.featured),\n        isLoading: state.certifications.isLoading,\n        errMsg: state.certifications.errMsg\n    }\n}\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,OAAO,QAAQ,0BAA0B;AAClD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,CAAC,QAAQ,cAAc;AAEhC,OAAO,MAAMC,kBAAkB,GAAGJ,gBAAgB,CAC9C,mCAAmC,EACnC,YAAY;EACR,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,GAAG,gBAAgB,CAAC;EACxD,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IACd,OAAOC,OAAO,CAAC,2BAA2B,GAAGJ,QAAQ,CAACK,MAAM,CAAC;EACjE;EACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI;AACf,CACJ,CAAC;AAED,MAAME,YAAY,GAAG;EACjBC,mBAAmB,EAAE,EAAE;EACvBC,SAAS,EAAE,IAAI;EACfC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,mBAAmB,GAAGlB,WAAW,CAAC;EACpCmB,IAAI,EAAE,gBAAgB;EACtBL,YAAY;EACZM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAE;IACX,CAAChB,kBAAkB,CAACiB,OAAO,GAAIC,KAAK,IAAK;MACrCA,KAAK,CAACP,SAAS,GAAG,IAAI;IAC1B,CAAC;IACD,CAACX,kBAAkB,CAACmB,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,MAAM,GAAG,EAAE;MACjBM,KAAK,CAACR,mBAAmB,GAAGZ,WAAW,CAACsB,MAAM,CAACC,OAAO,CAAC;IAC3D,CAAC;IACD,CAACrB,kBAAkB,CAACsB,QAAQ,GAAG,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,MAAM,GAAGQ,MAAM,CAACR,MAAM,GAAGQ,MAAM,CAACG,KAAK,CAACC,OAAO,GAAG,cAAc;IACxE;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,qBAAqB,GAAGZ,mBAAmB,CAACa,OAAO;AAEhE,OAAO,MAAMC,4BAA4B,GAAIT,KAAK,IAAK;EACnD,OAAO;IACHU,YAAY,EAAEV,KAAK,CAACW,cAAc,CAACnB,mBAAmB,CAACoB,IAAI,CAAEC,aAAa,IAAKA,aAAa,CAACC,QAAQ,CAAC;IACtGrB,SAAS,EAAEO,KAAK,CAACW,cAAc,CAAClB,SAAS;IACzCC,MAAM,EAAEM,KAAK,CAACW,cAAc,CAACjB;EACjC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}