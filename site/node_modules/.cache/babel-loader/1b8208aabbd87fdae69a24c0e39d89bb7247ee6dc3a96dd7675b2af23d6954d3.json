{"ast":null,"code":"// file name is camelcase rather than pascel case cause it does not export a react component. \n// import { PROJECTS } from \"../../app/shared/PROJECTS\"\nimport{createSlice,createAsyncThunk}from\"@reduxjs/toolkit\";import{baseURL}from\"../../app/shared/baseUrl\";import{mapImageUrl}from\"../../utils/mapImageURL\";const initialState={projectsArray:[],isLoading:true,errMsg:''};export const fetchProjects=createAsyncThunk('projects/fetchProjects',async()=>{const response=await fetch(baseURL+'projects');if(!response.ok){return Promise.reject('Unable to fetch status : '+response.status);}const data=await response.json();return data;});const projectsSlice=createSlice({name:'projects',initialState,reducers:{},extraReducers:{[fetchProjects.pending]:state=>{state.isLoading=true;},[fetchProjects.fulfilled]:(state,action)=>{state.isLoading=false;state.errMsg='';state.projectsArray=mapImageUrl(action.payload);},[fetchProjects.rejected]:(state,action)=>{state.isLoading=false;state.errMsg=action.error?action.error.message:'Fetch failed';}}});export const projectsReducer=projectsSlice.reducer;export const selectAllProjects=state=>{return state.projects.projectsArray;};// export const selectRandomProject = () => {\n//     return PROJECTS[Math.floor(PROJECTS.length * Math.random())];\n// };\nexport const selectProjectById=id=>state=>{return state.projects.projectsArray.find(project=>project.id===parseInt(id));};export const selectFeaturedProject=state=>{return{featuredItem:state.projects.projectsArray.find(project=>project.featured),isLoading:state.projects.isLoading,errMsg:state.projects.errMsg};};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseURL","mapImageUrl","initialState","projectsArray","isLoading","errMsg","fetchProjects","response","fetch","ok","Promise","reject","status","data","json","projectsSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","error","message","projectsReducer","reducer","selectAllProjects","projects","selectProjectById","id","find","project","parseInt","selectFeaturedProject","featuredItem","featured"],"sources":["/Users/marty/Desktop/projects-site/site/src/features/projects/projectsSlice.js"],"sourcesContent":["// file name is camelcase rather than pascel case cause it does not export a react component. \n// import { PROJECTS } from \"../../app/shared/PROJECTS\"\nimport { createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport { baseURL } from \"../../app/shared/baseUrl\";\nimport { mapImageUrl } from \"../../utils/mapImageURL\";\n\nconst initialState = {\n    projectsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\n\nexport const fetchProjects = createAsyncThunk(\n    'projects/fetchProjects',\n    async () => {\n        const response = await fetch(baseURL + 'projects');\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch status : ' + response.status); \n        }\n        const data = await response.json(); \n        return data;\n    }\n);\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [fetchProjects.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [fetchProjects.fulfilled]: (state, action) => {\n            state.isLoading = false; \n            state.errMsg = '';\n            state.projectsArray = mapImageUrl(action.payload); \n        },\n        [fetchProjects.rejected]: (state, action) => {\n            state.isLoading = false; \n            state.errMsg = action.error ? action.error.message : 'Fetch failed'; \n        }\n    }\n});\n\nexport const projectsReducer = projectsSlice.reducer; \n\nexport const selectAllProjects = (state) => {\n    return state.projects.projectsArray; \n};\n\n// export const selectRandomProject = () => {\n//     return PROJECTS[Math.floor(PROJECTS.length * Math.random())];\n\n// };\n\nexport const selectProjectById = (id) => (state) => {\n    return state.projects.projectsArray.find((project) => project.id === parseInt(id));\n}\n\nexport const selectFeaturedProject = (state) => {\n    return {\n        featuredItem: state.projects.projectsArray.find((project) => project.featured),\n        isLoading: state.projects.isLoading,\n        errMsg: state.projects.errMsg\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,OAASA,WAAW,CAAEC,gBAAgB,KAAO,kBAAkB,CAC/D,OAASC,OAAO,KAAQ,0BAA0B,CAClD,OAASC,WAAW,KAAQ,yBAAyB,CAErD,KAAM,CAAAC,YAAY,CAAG,CACjBC,aAAa,CAAE,EAAE,CACjBC,SAAS,CAAE,IAAI,CACfC,MAAM,CAAE,EACZ,CAAC,CAGD,MAAO,MAAM,CAAAC,aAAa,CAAGP,gBAAgB,CACzC,wBAAwB,CACxB,SAAY,CACR,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACR,OAAO,CAAG,UAAU,CAAC,CAClD,GAAI,CAACO,QAAQ,CAACE,EAAE,CAAE,CACd,MAAO,CAAAC,OAAO,CAACC,MAAM,CAAC,2BAA2B,CAAGJ,QAAQ,CAACK,MAAM,CAAC,CACxE,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CACJ,CAAC,CAED,KAAM,CAAAE,aAAa,CAAGjB,WAAW,CAAC,CAC9BkB,IAAI,CAAE,UAAU,CAChBd,YAAY,CACZe,QAAQ,CAAE,CAAC,CAAC,CACZC,aAAa,CAAE,CACX,CAACZ,aAAa,CAACa,OAAO,EAAIC,KAAK,EAAK,CAChCA,KAAK,CAAChB,SAAS,CAAG,IAAI,CAC1B,CAAC,CACD,CAACE,aAAa,CAACe,SAAS,EAAG,CAACD,KAAK,CAAEE,MAAM,GAAK,CAC1CF,KAAK,CAAChB,SAAS,CAAG,KAAK,CACvBgB,KAAK,CAACf,MAAM,CAAG,EAAE,CACjBe,KAAK,CAACjB,aAAa,CAAGF,WAAW,CAACqB,MAAM,CAACC,OAAO,CAAC,CACrD,CAAC,CACD,CAACjB,aAAa,CAACkB,QAAQ,EAAG,CAACJ,KAAK,CAAEE,MAAM,GAAK,CACzCF,KAAK,CAAChB,SAAS,CAAG,KAAK,CACvBgB,KAAK,CAACf,MAAM,CAAGiB,MAAM,CAACG,KAAK,CAAGH,MAAM,CAACG,KAAK,CAACC,OAAO,CAAG,cAAc,CACvE,CACJ,CACJ,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,eAAe,CAAGZ,aAAa,CAACa,OAAO,CAEpD,MAAO,MAAM,CAAAC,iBAAiB,CAAIT,KAAK,EAAK,CACxC,MAAO,CAAAA,KAAK,CAACU,QAAQ,CAAC3B,aAAa,CACvC,CAAC,CAED;AACA;AAEA;AAEA,MAAO,MAAM,CAAA4B,iBAAiB,CAAIC,EAAE,EAAMZ,KAAK,EAAK,CAChD,MAAO,CAAAA,KAAK,CAACU,QAAQ,CAAC3B,aAAa,CAAC8B,IAAI,CAAEC,OAAO,EAAKA,OAAO,CAACF,EAAE,GAAKG,QAAQ,CAACH,EAAE,CAAC,CAAC,CACtF,CAAC,CAED,MAAO,MAAM,CAAAI,qBAAqB,CAAIhB,KAAK,EAAK,CAC5C,MAAO,CACHiB,YAAY,CAAEjB,KAAK,CAACU,QAAQ,CAAC3B,aAAa,CAAC8B,IAAI,CAAEC,OAAO,EAAKA,OAAO,CAACI,QAAQ,CAAC,CAC9ElC,SAAS,CAAEgB,KAAK,CAACU,QAAQ,CAAC1B,SAAS,CACnCC,MAAM,CAAEe,KAAK,CAACU,QAAQ,CAACzB,MAC3B,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}